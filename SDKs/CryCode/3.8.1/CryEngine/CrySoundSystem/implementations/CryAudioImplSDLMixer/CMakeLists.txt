set(THIS_PROJECT CryAudioImplSDLMixer)

project( ${THIS_PROJECT} )

#START-FILE-LIST
# File List auto generated by waf2cmake.py, do not modify manually.

set (SourceGroup_HeaderFiles
	ATLEntities_sdlmixer.h
	AudioSystemImplCVars_sdlmixer.h
	AudioSystemImpl_sdlmixer.h
	Common_sdlmixer.h
	SDLMixerSoundEngine.h
	SDLMixerSoundEngineTypes.h
	SDLMixerSoundEngineUtil.h
	resource.h
	stdafx.h
	stdafx.cpp
)
source_group("Header Files" FILES ${SourceGroup_HeaderFiles})


set (SourceGroup_Root
	stdafx.cpp
)
source_group("Root" FILES ${SourceGroup_Root})


set (SourceGroup_SourceFiles
	AudioSystemImplCVars_sdlmixer.cpp
	AudioSystemImpl_sdlmixer.cpp
	Common_sdlmixer.cpp
	CryAudioImpl_sdlmixer.cpp
	SDLMixerSoundEngine.cpp
)
source_group("Source Files" FILES ${SourceGroup_SourceFiles})


# Support unity build with uber files
set(CryAudioImplSDLMixer_uber_0_cpp ${SourceGroup_HeaderFiles} ${SourceGroup_SourceFiles}  )
enable_unity_build( "CryAudioImplSDLMixer_uber_0.cpp" CryAudioImplSDLMixer_uber_0_cpp )

set(NoUberFile ${SourceGroup_Root}  )


set (SOURCES
	${CryAudioImplSDLMixer_uber_0_cpp}
	${NoUberFile}
)
#END-FILE-LIST

include_directories( ../../Common )
include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
include_directories( ${SDK_DIR}/Audio )
include_directories( ${SDK_DIR}/Audio/oggvorbis/inc )
if (WIN64 OR WIN32)
include_directories( ${SDK_DIR}/SDL2/include/win )
endif()
include_directories( ${SDK_DIR}/Audio/SDL_mixer/include )


if (DURANGO)
	link_directories( ${SDK_DIR}/Audio/AK/lib/xboxone )
elseif (WIN64)
	link_directories( "${SDK_DIR}/SDL2/lib/x64/" )
	link_directories( ${SDK_DIR}/Audio/SDL_mixer/lib/x64 )
elseif (WIN32)
	link_directories( "${SDK_DIR}/SDL2/lib/x86/" )
	link_directories( ${SDK_DIR}/Audio/SDL_mixer/lib/x86 )
endif()

if (OPTION_SOUND_WWISE)
	add_definitions( -DWWISE_FOR_BLUBB )
endif()

add_library( ${THIS_PROJECT} ${SOURCES})

target_link_libraries( ${THIS_PROJECT} SDL2 SDL2_mixer )

USE_MSVC_PRECOMPILED_HEADER( ${THIS_PROJECT} "stdafx.h" "stdafx.cpp" )

SET_PLATFORM_TARGET_PROPERTIES( ${THIS_PROJECT} )
